// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: playlist.sql

package db

import (
	"context"
	"database/sql"
)

const addOrUpdatePlaylist = `-- name: AddOrUpdatePlaylist :exec
INSERT OR REPLACE INTO playlist
(id, name, url) VALUES (?, ?, ?)
`

type AddOrUpdatePlaylistParams struct {
	ID   string
	Name sql.NullString
	Url  sql.NullString
}

func (q *Queries) AddOrUpdatePlaylist(ctx context.Context, arg AddOrUpdatePlaylistParams) error {
	_, err := q.exec(ctx, q.addOrUpdatePlaylistStmt, addOrUpdatePlaylist, arg.ID, arg.Name, arg.Url)
	return err
}

const addOrUpdatePlaylistItem = `-- name: AddOrUpdatePlaylistItem :exec
INSERT OR REPLACE INTO playlist_item
(id, title, artists, image, has_valid_spotify_id) VALUES (?, ?, ?, ?, ?)
`

type AddOrUpdatePlaylistItemParams struct {
	ID                string
	Title             sql.NullString
	Artists           sql.NullString
	Image             sql.NullString
	HasValidSpotifyID int64
}

func (q *Queries) AddOrUpdatePlaylistItem(ctx context.Context, arg AddOrUpdatePlaylistItemParams) error {
	_, err := q.exec(ctx, q.addOrUpdatePlaylistItemStmt, addOrUpdatePlaylistItem,
		arg.ID,
		arg.Title,
		arg.Artists,
		arg.Image,
		arg.HasValidSpotifyID,
	)
	return err
}

const addPlaylistItemBelongsToPlaylist = `-- name: AddPlaylistItemBelongsToPlaylist :exec
INSERT OR IGNORE INTO playlist_item_belongs_to_playlist
(playlist_item, playlist) VALUES (?, ?)
`

type AddPlaylistItemBelongsToPlaylistParams struct {
	PlaylistItem string
	Playlist     string
}

func (q *Queries) AddPlaylistItemBelongsToPlaylist(ctx context.Context, arg AddPlaylistItemBelongsToPlaylistParams) error {
	_, err := q.exec(ctx, q.addPlaylistItemBelongsToPlaylistStmt, addPlaylistItemBelongsToPlaylist, arg.PlaylistItem, arg.Playlist)
	return err
}

const getPlaylist = `-- name: GetPlaylist :one
SELECT id, name, url FROM playlist
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPlaylist(ctx context.Context, id string) (Playlist, error) {
	row := q.queryRow(ctx, q.getPlaylistStmt, getPlaylist, id)
	var i Playlist
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}

const getPlaylistItem = `-- name: GetPlaylistItem :one
SELECT id, title, artists, image, has_valid_spotify_id FROM playlist_item
WHERE id = ?
`

func (q *Queries) GetPlaylistItem(ctx context.Context, id string) (PlaylistItem, error) {
	row := q.queryRow(ctx, q.getPlaylistItemStmt, getPlaylistItem, id)
	var i PlaylistItem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artists,
		&i.Image,
		&i.HasValidSpotifyID,
	)
	return i, err
}
