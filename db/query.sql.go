// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const addMatch = `-- name: AddMatch :exec
INSERT INTO match
(id, session, round_number, winner, loser) VALUES (NULL, ?, ?, ?, ?)
`

type AddMatchParams struct {
	Session     int64
	RoundNumber int64
	Winner      string
	Loser       string
}

func (q *Queries) AddMatch(ctx context.Context, arg AddMatchParams) error {
	_, err := q.db.ExecContext(ctx, addMatch,
		arg.Session,
		arg.RoundNumber,
		arg.Winner,
		arg.Loser,
	)
	return err
}

const addOrUpdatePlaylist = `-- name: AddOrUpdatePlaylist :exec
INSERT OR REPLACE INTO playlist
(id, name, url) VALUES (?, ?, ?)
`

type AddOrUpdatePlaylistParams struct {
	ID   string
	Name sql.NullString
	Url  sql.NullString
}

func (q *Queries) AddOrUpdatePlaylist(ctx context.Context, arg AddOrUpdatePlaylistParams) error {
	_, err := q.db.ExecContext(ctx, addOrUpdatePlaylist, arg.ID, arg.Name, arg.Url)
	return err
}

const addOrUpdatePlaylistItem = `-- name: AddOrUpdatePlaylistItem :exec
INSERT OR REPLACE INTO playlist_item
(id, title, artists, image, playlist) VALUES (?, ?, ?, ?, ?)
`

type AddOrUpdatePlaylistItemParams struct {
	ID       string
	Title    sql.NullString
	Artists  sql.NullString
	Image    sql.NullString
	Playlist string
}

func (q *Queries) AddOrUpdatePlaylistItem(ctx context.Context, arg AddOrUpdatePlaylistItemParams) error {
	_, err := q.db.ExecContext(ctx, addOrUpdatePlaylistItem,
		arg.ID,
		arg.Title,
		arg.Artists,
		arg.Image,
		arg.Playlist,
	)
	return err
}

const addSession = `-- name: AddSession :one
INSERT INTO session
(id, playlist, current_round) VALUES (NULL, ?, 0)
RETURNING session.id
`

func (q *Queries) AddSession(ctx context.Context, playlist string) (int64, error) {
	row := q.db.QueryRowContext(ctx, addSession, playlist)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addUser = `-- name: AddUser :one
INSERT OR IGNORE INTO user (id, current_session) VALUES (?, NULL)
RETURNING id, current_session
`

func (q *Queries) AddUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser, id)
	var i User
	err := row.Scan(&i.ID, &i.CurrentSession)
	return i, err
}

const getCurrentRound = `-- name: GetCurrentRound :one
SELECT current_round FROM session
WHERE id = ?
`

func (q *Queries) GetCurrentRound(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentRound, id)
	var current_round int64
	err := row.Scan(&current_round)
	return current_round, err
}

const getNextPair = `-- name: GetNextPair :many
WITH already_lost_this_session AS (
	SELECT m.loser FROM match m
	WHERE m.session = ?1
),
already_won_this_round AS (
	SELECT m.winner FROM match m
	WHERE m.session = ?1 AND m.round_number = ?2
)
SELECT id, title, artists, image, playlist FROM playlist_item
WHERE id NOT IN already_lost_this_session AND id NOT IN already_won_this_round
ORDER BY RANDOM() DESC LIMIT 2
`

type GetNextPairParams struct {
	Session     int64
	RoundNumber int64
}

func (q *Queries) GetNextPair(ctx context.Context, arg GetNextPairParams) ([]PlaylistItem, error) {
	rows, err := q.db.QueryContext(ctx, getNextPair, arg.Session, arg.RoundNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlaylistItem
	for rows.Next() {
		var i PlaylistItem
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artists,
			&i.Image,
			&i.Playlist,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylist = `-- name: GetPlaylist :one
SELECT id, name, url FROM playlist
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPlaylist(ctx context.Context, id string) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylist, id)
	var i Playlist
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}

const getPlaylistItem = `-- name: GetPlaylistItem :one
SELECT id, title, artists, image, playlist FROM playlist_item
WHERE id = ?
`

func (q *Queries) GetPlaylistItem(ctx context.Context, id string) (PlaylistItem, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistItem, id)
	var i PlaylistItem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artists,
		&i.Image,
		&i.Playlist,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, current_session FROM user
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.CurrentSession)
	return i, err
}

const setCurrentRound = `-- name: SetCurrentRound :exec
UPDATE session
SET current_round = ?
WHERE id = ?
`

type SetCurrentRoundParams struct {
	CurrentRound int64
	ID           int64
}

func (q *Queries) SetCurrentRound(ctx context.Context, arg SetCurrentRoundParams) error {
	_, err := q.db.ExecContext(ctx, setCurrentRound, arg.CurrentRound, arg.ID)
	return err
}

const setUserSession = `-- name: SetUserSession :exec
UPDATE user
SET current_session = ?
WHERE id = ?
`

type SetUserSessionParams struct {
	CurrentSession sql.NullInt64
	ID             string
}

func (q *Queries) SetUserSession(ctx context.Context, arg SetUserSessionParams) error {
	_, err := q.db.ExecContext(ctx, setUserSession, arg.CurrentSession, arg.ID)
	return err
}
