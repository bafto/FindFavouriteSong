// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package db

import (
	"context"
	"database/sql"
)

const addMatch = `-- name: AddMatch :exec
INSERT INTO match
(id, session, round_number, winner, loser) VALUES (NULL, ?, ?, ?, ?)
`

type AddMatchParams struct {
	Session     int64
	RoundNumber int64
	Winner      string
	Loser       string
}

func (q *Queries) AddMatch(ctx context.Context, arg AddMatchParams) error {
	_, err := q.exec(ctx, q.addMatchStmt, addMatch,
		arg.Session,
		arg.RoundNumber,
		arg.Winner,
		arg.Loser,
	)
	return err
}

const addSession = `-- name: AddSession :one
INSERT INTO session
(id, playlist, current_round, user, winner, creation_timestamp) VALUES (NULL, ?, 0, ?, NULL, CURRENT_TIMESTAMP)
RETURNING session.id
`

type AddSessionParams struct {
	Playlist string
	User     string
}

func (q *Queries) AddSession(ctx context.Context, arg AddSessionParams) (int64, error) {
	row := q.queryRow(ctx, q.addSessionStmt, addSession, arg.Playlist, arg.User)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const countMatchesForRound = `-- name: CountMatchesForRound :one
SELECT COUNT(*) FROM match
WHERE session = ? AND round_number = ?
`

type CountMatchesForRoundParams struct {
	Session     int64
	RoundNumber int64
}

func (q *Queries) CountMatchesForRound(ctx context.Context, arg CountMatchesForRoundParams) (int64, error) {
	row := q.queryRow(ctx, q.countMatchesForRoundStmt, countMatchesForRound, arg.Session, arg.RoundNumber)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteMatchesForSession = `-- name: DeleteMatchesForSession :exec
DELETE FROM match WHERE session = ?
`

func (q *Queries) DeleteMatchesForSession(ctx context.Context, session int64) error {
	_, err := q.exec(ctx, q.deleteMatchesForSessionStmt, deleteMatchesForSession, session)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM session WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteSessionStmt, deleteSession, id)
	return err
}

const getCurrentRound = `-- name: GetCurrentRound :one
SELECT current_round FROM session
WHERE id = ?
`

func (q *Queries) GetCurrentRound(ctx context.Context, id int64) (int64, error) {
	row := q.queryRow(ctx, q.getCurrentRoundStmt, getCurrentRound, id)
	var current_round int64
	err := row.Scan(&current_round)
	return current_round, err
}

const getNumberOfMatchesCompleted = `-- name: GetNumberOfMatchesCompleted :one
SELECT COUNT(*) FROM match
WHERE session = ?
`

func (q *Queries) GetNumberOfMatchesCompleted(ctx context.Context, session int64) (int64, error) {
	row := q.queryRow(ctx, q.getNumberOfMatchesCompletedStmt, getNumberOfMatchesCompleted, session)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSession = `-- name: GetSession :one
SELECT id, playlist, current_round, user, winner, creation_timestamp FROM session
WHERE id = ?
`

func (q *Queries) GetSession(ctx context.Context, id int64) (Session, error) {
	row := q.queryRow(ctx, q.getSessionStmt, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Playlist,
		&i.CurrentRound,
		&i.User,
		&i.Winner,
		&i.CreationTimestamp,
	)
	return i, err
}

const getWinner = `-- name: GetWinner :one
SELECT winner FROM session
WHERE id = ?
`

func (q *Queries) GetWinner(ctx context.Context, id int64) (sql.NullString, error) {
	row := q.queryRow(ctx, q.getWinnerStmt, getWinner, id)
	var winner sql.NullString
	err := row.Scan(&winner)
	return winner, err
}

const setCurrentRound = `-- name: SetCurrentRound :exec
UPDATE session
SET current_round = ?
WHERE id = ?
`

type SetCurrentRoundParams struct {
	CurrentRound int64
	ID           int64
}

func (q *Queries) SetCurrentRound(ctx context.Context, arg SetCurrentRoundParams) error {
	_, err := q.exec(ctx, q.setCurrentRoundStmt, setCurrentRound, arg.CurrentRound, arg.ID)
	return err
}

const setWinner = `-- name: SetWinner :exec
UPDATE session
SET winner = ?
WHERE id = ?
`

type SetWinnerParams struct {
	Winner sql.NullString
	ID     int64
}

func (q *Queries) SetWinner(ctx context.Context, arg SetWinnerParams) error {
	_, err := q.exec(ctx, q.setWinnerStmt, setWinner, arg.Winner, arg.ID)
	return err
}
