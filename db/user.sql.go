// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const addPlaylistAddedByUser = `-- name: AddPlaylistAddedByUser :exec
INSERT OR IGNORE INTO playlist_added_by_user
(user, playlist) VALUES (?, ?)
`

type AddPlaylistAddedByUserParams struct {
	User     string
	Playlist string
}

func (q *Queries) AddPlaylistAddedByUser(ctx context.Context, arg AddPlaylistAddedByUserParams) error {
	_, err := q.exec(ctx, q.addPlaylistAddedByUserStmt, addPlaylistAddedByUser, arg.User, arg.Playlist)
	return err
}

const addUser = `-- name: AddUser :one
INSERT OR IGNORE INTO user (id, current_session) VALUES (?, NULL)
RETURNING id, current_session
`

func (q *Queries) AddUser(ctx context.Context, id string) (User, error) {
	row := q.queryRow(ctx, q.addUserStmt, addUser, id)
	var i User
	err := row.Scan(&i.ID, &i.CurrentSession)
	return i, err
}

const getAllWinnersForUser = `-- name: GetAllWinnersForUser :many
SELECT winner FROM session
WHERE user = ? AND winner IS NOT NULL
`

func (q *Queries) GetAllWinnersForUser(ctx context.Context, user string) ([]sql.NullString, error) {
	rows, err := q.query(ctx, q.getAllWinnersForUserStmt, getAllWinnersForUser, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var winner sql.NullString
		if err := rows.Scan(&winner); err != nil {
			return nil, err
		}
		items = append(items, winner)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylistsForUser = `-- name: GetPlaylistsForUser :many
SELECT p.id, p.name, p.url FROM playlist_added_by_user pa, playlist p
WHERE pa.user = ? AND p.id = pa.playlist
`

func (q *Queries) GetPlaylistsForUser(ctx context.Context, user string) ([]Playlist, error) {
	rows, err := q.query(ctx, q.getPlaylistsForUserStmt, getPlaylistsForUser, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(&i.ID, &i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, current_session FROM user
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.CurrentSession)
	return i, err
}

const setUserSession = `-- name: SetUserSession :exec
UPDATE user
SET current_session = ?
WHERE id = ?
`

type SetUserSessionParams struct {
	CurrentSession sql.NullInt64
	ID             string
}

func (q *Queries) SetUserSession(ctx context.Context, arg SetUserSessionParams) error {
	_, err := q.exec(ctx, q.setUserSessionStmt, setUserSession, arg.CurrentSession, arg.ID)
	return err
}
